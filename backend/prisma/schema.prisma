generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum roles {
  doctor
  assistant
  worker
  admin
  leader
  student
}

enum grades {
  first
  second
  third
  fourth
}

enum specializations {
  general
  cs
  it
  is
  ai
  se
}

enum communityRoles {
  manager
  helper
  reader
}

model user {
  id              Int               @id @default(autoincrement())
  email           String            @unique
  name            String
  image           String
  password        String?

  role            roles             @default(student)
  specialization  specializations   @default(general)
  grade           grades

  communityRole   communityRoles?
  communityName   String?
  community       community?        @relation(fields: [communityName], references: [name])

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  documentations  documentation[]
  tasks           task[]
  quizzes         quiz[]

  @@map("Users")
}

model subject {
  id              Int               @id @default(autoincrement())
  specialization  specializations
  grade           grades
  name            String            @unique


  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  documentations  documentation[]
  tasks           task[]
  quizzes         quiz[]

  @@map("Subject")
}

model documentation {
  id            Int      @id @default(autoincrement())
  title         String
  description   String
  link          String

  subjectId     Int
  subject       subject  @relation(fields: [subjectId], references: [id])

  uploaderId    Int
  uploader      user     @relation(fields: [uploaderId], references: [id])

  isDeleted     Boolean  @default(false)
  deletedAt     DateTime?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("Documentations")
}

model task {
  id            Int      @id @default(autoincrement())
  title         String
  description   String

  startDate     DateTime
  endDate       DateTime

  subjectId     Int
  subject       subject  @relation(fields: [subjectId], references: [id])

  creatorId     Int
  creator       user     @relation(fields: [creatorId], references: [id])

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("Task")
}

model quiz {
  id            Int      @id @default(autoincrement())
  title         String
  description   String

  startDate     DateTime
  duration      Int

  subjectId     Int
  subject       subject  @relation(fields: [subjectId], references: [id])

  creatorId     Int
  creator       user     @relation(fields: [creatorId], references: [id])

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("Quiz")
}

model event {
  id            Int      @id @default(autoincrement())
  title         String
  description   String
  link          String
  image         String?

  startDate     DateTime
  endDate       DateTime

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("Events")
}

model community {
  id            Int      @id @default(autoincrement())
  name          String   @unique
  description   String
  image         String

  users         user[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("Communities")
}
